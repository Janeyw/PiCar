<?xml version="1.0"?>

<launch>

  <!-- Create a ydlidar node, which takes raw data from the lidar and outputs a LaserScan message on the /scan topic -->
  <node pkg="ydlidar" type="ydlidar_node" name="ydlidar_node" output="screen">
    <param name="port"         type="string" value="/dev/ydlidar"/>  
    <param name="baudrate"     type="int"    value="115200"/>
    <param name="frame_id"     type="string" value="laser_frame"/>
    <param name="angle_fixed"  type="bool"   value="true"/>
    <param name="low_exposure"  type="bool"   value="false"/>
    <param name="heartbeat"    type="bool"   value="false"/>
    <param name="resolution_fixed"    type="bool"   value="true"/>
    <param name="angle_min"    type="double" value="-180" />
    <param name="angle_max"    type="double" value="180" />
    <param name="range_min"    type="double" value="0.08" />
    <param name="range_max"    type="double" value="16.0" />
    <param name="ignore_array" type="string" value="" />
    <param name="samp_rate"    type="int"    value="9"/>
    <param name="frequency"    type="double" value="8"/>
  </node>

  <!-- Create a static transform node to describe the position of the laser relative to a point on the car that represents the car's position -->
  <!-- To make things simple, just pick the position of the lidar itself -->
  <node pkg="tf" type="static_transform_publisher" name="static_tf" args="0 0 0 0 0 0 base_frame laser_frame 100"/>

  <!-- Create a hector_mapping node, which takes the lidar data from the /scan topic and outputs the pose and map from the SLAM algorithm -->
  <node pkg="hector_mapping" type="hector_mapping" name="hector_mapping" output="screen">
    
    <!-- Frame names -->
    <param name="map_frame" value="map" />
    <param name="base_frame" value="base_frame" />

    <!-- Use "base_frame" for base_frame and odom_frame because we have no odometry data -->
    <param name="odom_frame" value="base_frame" />
    
    <!-- Tf use -->
    <param name="use_tf_scan_transformation" value="true"/>
    <param name="use_tf_pose_start_estimate" value="false"/>
    <param name="pub_map_odom_transform" value="true"/>
    
    <!-- Map size / start point -->
    <param name="map_resolution" value="0.050"/>
    <param name="map_size" value="2048"/>
    <param name="map_start_x" value="0.5"/>
    <param name="map_start_y" value="0.5" />
    <param name="map_multi_res_levels" value="2" />
    
    <!-- Map update parameters -->
    <param name="update_factor_free" value="0.4"/>
    <param name="update_factor_occupied" value="0.9" />    
    <param name="map_update_distance_thresh" value="0.4"/>
    <param name="map_update_angle_thresh" value="0.06" />
    <param name="laser_z_min_value" value = "-1.0" />
    <param name="laser_z_max_value" value = "1.0" />
    
    <!-- Advertising config --> 
    <param name="advertise_map_service" value="true"/>
    
    <param name="scan_subscriber_queue_size" value="5"/>
    <param name="scan_topic" value="scan"/>
    
    <param name="tf_map_scanmatch_transform_frame_name" value="scanmatcher_frame" />
  </node>

  <!-- Create a hector_geotiff node, which draws maps from the lidar data -->
  <node pkg="hector_geotiff" type="geotiff_node" name="hector_geotiff_node" output="screen" launch-prefix="nice -n 15">
    <remap from="map" to="/dynamic_map" />

    <!-- Writes maps to PiCar_SLAM/maps, change value to write them somewhere else -->
    <param name="map_file_path" type="string" value="$(find picar_slam)/maps" />

    <!-- The maps files are given the base name with an appended time stamp -->
    <param name="map_file_base_name" type="string" value="hector_slam_map" />

    <!-- The save period is how often (in seconds) the map automatically saves -->
    <!-- If the value is 0.0, automatic saving is disabled -->
    <param name="geotiff_save_period" type="double" value="10" />

    <param name="draw_background_checkerboard" type="bool" value="true" />
    <param name="draw_free_space_grid" type="bool" value="true" />
    <param name="plugins" type="string" value="" />
  </node>

  <!-- Create a picar_steering node, which take pose data and outputs commands to the arduino to drive the car to the target coordinates --> 
  <node pkg="picar_slam" type="steering_node.py" name="steering_node" output="screen" />

</launch>
